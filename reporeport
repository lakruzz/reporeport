#!/usr/bin/env python3
import os
import subprocess
import json
import sys
import base64
import re

# Add the subdirectory containing the classes to the general class_path
class_path = os.path.dirname(os.path.abspath(__file__))+"/classes"
sys.path.append(class_path)

from repo import Repo
from ghutils import Ghutils

# Try to import the argparse module
try:
    import argparse
except ImportError:
    # If the module is not found, install it
    print("argparse module not found. Installing...")
    subprocess.check_call(["pip", "install", "argparse"])
    # Try to import the module again
    importlib.import_module("argparse")

if __name__ == "__main__":

    # Define command-line arguments
    parser = argparse.ArgumentParser()
    

    
    exclusive_group = parser.add_mutually_exclusive_group(required=True)
    exclusive_group.add_argument(
        '--file', help='A file containing a list of full names (user/repo) of repositories')
    exclusive_group.add_argument('--repo', help='The full name of the repository in the form "org/repo"')
    exclusive_group.add_argument('--this', action='store_true', help='Indicates that the report is generated from current directory')
    
    parser.add_argument('--output', help='The name of the output file. "issue" is a special case when used together with --this - It will updates an issue on the repo. If not specified "stdout" is used', default='stdout')
    
    args = parser.parse_args()

    # --file
    if args.file is not None:
        # Read the list of repositories from the specified file
        with open(args.file, 'r') as f:
            repos = [line.strip() for line in f]

        # Extract the organization and repository name from each line in the file and print the report
        for repo in repos:
            org, repo_name = repo.split('/', maxsplit=1)
            Repo.full_report(org, repo_name, args.output)
   
    # --repo
    elif args.repo is not None:
        org, repo_name = args.repo.split('/', maxsplit=1)
        Repo.full_report(org, repo_name, args.output)

    # --this
    elif args.this:
        repo = Ghutils.get_org_repo_from_current_directory()
        if repo is None:
            print("Unable to determine the repository name from the current directory. Are you in a repository?", file=sys.stderr)
            sys.exit(1)
        org, repo_name = repo.split('/', maxsplit=1)
        Repo.full_report(org, repo_name, args.output) 

    # Arguments used incorrectly
    else:
        print('error', file=sys.stderr)
        sys.exit(1)
