#!/usr/bin/env python3
import os
import subprocess
import json
import sys
import base64
import re
class_path = os.path.dirname(os.path.abspath(__file__))+"/classes"
sys.path.append(class_path)


# Try to import the argparse module
try:
    import argparse
except ImportError:
    # If the module is not found, install it
    print("argparse module not found. Installing...")
    subprocess.check_call(["pip", "install", "argparse"])
    # Try to import the module again
    importlib.import_module("argparse")

from repo import Repo

if __name__ == "__main__":

    # Define command-line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('--org', help='The GitHub organization or user')
    parser.add_argument('--repo', help='The name of the repository')
    parser.add_argument('--full_name', help='The full name of the repository in the form "org/repo"')
    parser.add_argument(
        '--file', help='A file containing a list of full names (user/repo) of repositories')
    args = parser.parse_args()

    if args.file is not None:
        # Read the list of repositories from the specified file
        with open(args.file, 'r') as f:
            repos = [line.strip() for line in f]

        # Extract the organization and repository name from each line in the file
        for repo in repos:
            org, repo_name = repo.split('/', maxsplit=1)
            Repo.full_report(org, repo_name)

    elif args.org is not None and args.repo is not None:

        Repo.full_report(args.org, args.repo)
    
    elif args.full_name is not None:
        org, repo_name = args.full_name.split('/', maxsplit=1)
        Repo.full_report(org, repo_name)

    else:
        print("Error: You must specify either --file or --full_name or both --org and --repo", file=sys.stderr)
        sys.exit(1)
